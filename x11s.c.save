#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <sys/wait.h>
#include <unistd.h>
#include <X11/X.h>
#include <X11/cursorfont.h>
#include <X11/keysymdef.h>
#include <X11/Xatom.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#ifdef XINERAMA
#include <X11/extensions/Xinerama.h>
#endif



static int (*xerrorxlib)(Display*, XErrorEvent *);

static int xerrorstart(Display *display, XErrorEvent *e) {
	printf("another instance" -1);
	return -1;
}

static int xerror(Display *display, XErrorEvent *e) {
	printf("request code %d, error code: %d\n", e->request_code, e->error_code);
	return xerrorxlib(display, e);
}

static int xerrordummy(Display *display, XErrorEvent *e) {
	printf("xid: %s, request code: %d, error code: %d...idle....   \n", e->resourceid,
								e->request_code, e->error_code);
}



static Display *display;
static Window root;
int rootw;

static int def_screen;
static int sw, sh;

unsigned long black, white;

static Window checkwin;


Font font;
Cursor cursor, cursor_move, cursor_size;


bool alt_pressed = false, shift_pressed = false;




void focus(Window window) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, window);
	XRaiseWindow(display, window);
	XSetInputFocus(display, window, RevertToPointerRoot, CurrentTime);
}

Window get_focused() {
	printf("__________%s__________|__________\n", __FUNCTION__);
	Window winfoc;
	int rev_foc;
	XGetInputFocus(display, &winfoc, &rev_foc);
	return winfoc;
}



void handle_expose(XExposeEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);
	Window winfoc;
	int rev_foc;
	XGetInputFocus(display, &winfoc, &rev_foc);

	XSync(display, False);
}

void handle_map_request(XMapRequestEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);

	XWindowAttributes xwa;
	if (!XGetWindowAttributes(display, e->window, &xwa) || xwa.override_redirect) return;

	XSetWindowAttributes at;
	at.event_mask = SubstructureRedirectMask |
			SubstructureNotifyMask |
			StructureNotifyMask |
			ExposureMask |
			KeyPressMask |
			KeyReleaseMask |
			ButtonPressMask |
			ButtonReleaseMask |
			EnterWindowMask |
			LeaveWindowMask |
			FocusChangeMask ;

//	XChangeWindowAttributes(display, e->window, CWEventMask | CWCursor, &at);
	XSelectInput(display, e->window, EnterWindowMask | FocusChangeMask |
					PropertyChangeMask | StructureNotifyMask);

	XMapWindow(display, e->window);
//	focus(e->window);
}

void handle_key_press(XKeyEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);

	Window focused = get_focused();

	int _mask = (e->state & (ShiftMask | ControlMask | Mod1Mask | Mod3Mask | Mod4Mask | Mod5Mask) );

	switch (XKeycodeToKeysym(display, e->keycode, 0)) {
		case XK_Alt_L:
			alt_pressed = true;
			break;
		case XK_Shift_L:
			shift_pressed = true;
			break;
		case XK_Return:
			break;

		case XK_7:
			XLowerWindow(display, focused);
			break;
		case XK_5:
			
			break;
		case XK_0:
			if (e->state & Mod1Mask) {
				if (fork() == 0) {
					if (display) close(ConnectionNumber(display));
					char *cmd[] = { "dmenu_run", NULL };
					setsid();
					execvp(cmd[0], cmd);
					perror("failed");
					exit(EXIT_SUCCESS);
				}
			}
			break;
	}
}


void handle_key_release(XKeyEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);

	switch (XKeycodeToKeysym(display, e->keycode, 0)) {
		case XK_Alt_L:
			alt_pressed = false;
			break;
		case XK_Shift_L:
			shift_pressed = false;
			break;
	}
}


void handle_configure_request(XConfigureRequestEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);
}
void handle_configure_notify(XConfigureEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);
}
void handle_button_press(XButtonEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);
}
void handle_button_release(XButtonEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);
}
void handle_destroy_notify(XDestroyWindowEvent *e) {
	printf("__________%s__________|___WINDOW_%d__________\n", __FUNCTION__, e->window);
}



void kz(int x) {
	if ( signal(SIGCHLD, kz) == SIG_ERR )
		exit(-1);
	while (0 < waitpid(-1, NULL, WNOHANG) );
}



void main(void) {


	kz(0);

	xerrorxlib = XSetErrorHandler(xerrorstart);

	display = XOpenDisplay(display);
	def_screen = DefaultScreen(display);

	sw = DisplayWidth(display, def_screen);
	sh = DisplayHeight(display, def_screen);
	root = RootWindow(display, def_screen);
	rootw = XDefaultRootWindow(display);

	black = BlackPixel(display, def_screen);
	white = WhitePixel(display, def_screen);

	XSync(display, False);
	XFlush(display);


	XSetErrorHandler(xerrordummy);
	XSetIOErrorHandler(xerrordummy);


	// font = XLoadFont(display, "-*-*-*-R-Normal--*-180-100-100-*-*");
	cursor = XCreateFontCursor(display, XC_left_ptr);
	cursor_move = XCreateFontCursor(display, XC_fleur);
	cursor_size = XCreateFontCursor(display, XC_sizing);





	XSetWindowAttributes at;
	at.event_mask = SubstructureRedirectMask |
			SubstructureNotifyMask |
			StructureNotifyMask |
			ExposureMask |
			KeyPressMask |
			KeyReleaseMask |
			PropertyChangeMask ;

	at.do_not_propagate_mask = 0;
	at.cursor = cursor;

	unsigned long at_mask = CWEventMask | CWCursor | NoEventMask | CWBackPixel;
	XSelectInput(display, root, at.event_mask);
	XSync(display, False);
	XChangeWindowAttributes(display, root, at_mask, &at);


	XUngrabKey(display, AnyKey, AnyModifier, root);




	XSync(display, False);
	XFlush(display);



	XEvent e;
	XSync(display, False);

	while (1) {
		XNextEvent(display, &e);

		switch (e.type) {
			case Expose:
				handle_expose(&e.xexpose);
				break;
			case KeyPress:
				handle_key_press(&e.xkey);
				break;
			case KeyRelease:
				handle_key_release(&e.xkey);
				break;
			case ConfigureRequest:
				handle_configure_request(&e.xconfigurerequest);
				break;
			case ConfigureNotify:
				handle_configure_notify(&e.xconfigure);
				break;
			case MapRequest:
				handle_map_request(&e.xmaprequest);
				break;
			case ButtonPress:
				handle_button_press(&e.xbutton);
				break;
			case ButtonRelease:
				handle_button_release(&e.xbutton);
				break;
			case DestroyNotify:
				handle_destroy_notify(&e.xdestroywindow);
				break;
		}
	}
}
