/*
 ============================================================================
 Name        : x11s.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

//#include <bits/signum-arch.h>
//#include <bits/signum-generic.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <X11/cursorfont.h>
#include <X11/keysymdef.h>
#include <X11/X.h>
#include <X11/Xatom.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#ifdef XINERAMA
#include <X11/extensions/Xinerama.h>
#endif /* XINERAMA */
//#include <X11/Xft/Xft.h>

#include <stdbool.h>

#define try bool __HadError = false;
#define catch(x) ExitJmp:if(__HadError)
#define throw(x) {__HadError=true; goto ExitJump;}


#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))


static int (*xerrorxlib)(Display*, XErrorEvent*);

static int xerrorstart(Display *display, XErrorEvent *e) {
	printf("another instance\n", -1);
	return -1;
}

static int xerror(Display *display, XErrorEvent *e) {
	printf("request code: %d, error code: %d\n", e->request_code,
			e->error_code);
	return xerrorxlib(display, e);
}
static int xerrordummy(Display *display, XErrorEvent *e) {
	printf("xid: %s, request code: %d, error code: %d...idle...   \n", e->resourceid, e->request_code,
			e->error_code);
}



static Display *display;
static Window root;
int rootw;

static Window checkwin;


int min_width = 200, min_height = 100;
int border_width = 1;
bool fs_border = false;
int border_color;

unsigned long black, white, red, green, blue;

unsigned long _RGB(int r, int g, int b) {
	return b + (g << 8) + (r << 16);
}

Font font;
Cursor cursor;
Cursor cursor_move;
Cursor cursor_size;

static int screen_def;
unsigned int sw;
unsigned int sh;

bool alt_pressed = false;
bool shift_pressed = false;

int num_monitors = 3;
int curr_monitor = 1;

























typedef struct program {
	Window window;
	XWindowAttributes xwa;
	int id;
	int monitor;
	bool raised;
	bool fullscreen;

	int x, y;
	int x_fs, y_fs, wid_fs, hei_fs;
	int x_rs, y_rs, wid_rs, hei_rs;

	int width, height;

	struct program *next;
	struct program *prev;
} program;

struct program *last, *first;

int prog_count = 0;

void init_progs() {
	last = (struct program*) malloc( sizeof ( struct program ) );
	last->next = last;
	last->prev = last;
	first = last;
}



program * get_prog(Window win) {
	program *obj = first;
	for(int i = 0; i < prog_count; i++) {
		if ( (int) obj->window == (int) win) return &(*obj);
		obj = obj->next;
	}
	return NULL;
}


















typedef struct monitor {
	int id;
	int count;
	Window lasts;
	Window prevs;

	program *last;
	program *first;

	struct monitor *next;
	struct monitor *prev;

} monitor;


monitor *lastmon, *firstmon;


monitor * add_mon(int id) {
	struct monitor *obj;
	obj = (struct monitor*) malloc( sizeof( struct monitor ) );

	obj->id = id;
	obj->count = 0;
	obj->lasts = root;
	obj->prevs = root;
	obj->next = firstmon;
	obj->prev = lastmon;

	lastmon->next = obj;
	lastmon = lastmon->next;

	printf("________FUNC_%s________________MONITOR_ADDED____ID_%d____LAST_WINDOW_%d______\n", __FUNCTION__, lastmon->id, lastmon->lasts);

	return obj;
}

monitor * get_mon(int id) {
	monitor *mon = firstmon;
	for (int i = 0; i < num_monitors; i++) {
		if ( (int) mon->id == id ) return &(*mon);
		mon = mon->next;
	}
	return lastmon;
}


















void founds(char *fn) {
	printf("________FUNC_%s______________________________________________________________________________________________________FOUNDS_BEGIN________\n", fn);

	program *prog = first;
	for(int i = 0; i < prog_count; i++) {
		printf("________FUNC_%s_______________FOUND__ID_%d_WINDOW_%d__X_%d_Y_%d_____Xrs_%d_Yrs_%d____Xfs_%d_Yfs_%d____MONITOR_%d___\n",
				fn, prog->id, prog->window, prog->x, prog->y, prog->x_fs, prog->y_fs, prog->x_rs, prog->y_rs, prog->monitor);
		//if (prog->next != NULL) 
		prog = prog->next;
	}
	Window winfocus;
	int revert_focus;
	XGetInputFocus(display, &winfocus, &revert_focus);

	printf("________FUNC_%s______________________________________________________________ROOT_%d_________ROOTW_%d________FOCUSED_%d__________PROG_COUNT_%d\n", fn, root, rootw, winfocus, prog_count);
}



program * add_prog(Window win) {
	struct program *obj;

/*	if ( (obj == get_prog(win)) != NULL  ) {
		obj->window = win;
		return obj;
	}
*/
	obj = (struct program*) malloc( sizeof ( struct program ) );

	obj->id = prog_count;
	obj->window = win;
	obj->next = first;
	obj->prev = last;

	last->next = obj;
	last = last->next;

	printf("________FUNC_%s________________PROG_ADDED____ID_%d____WINDOW_%d______\n", __FUNCTION__, last->id, last->window);

	founds(__FUNCTION__);

	prog_count++;

	return obj;
}



void *rem_prog(Window win) {

	printf("________FUNC_%s________________________________________WINDOW_TERMINATION_%d______\n", __FUNCTION__, win);

	monitor *mon;
	program *obj = first;
	for(int i = 0; i <= prog_count; i++) {
		printf("________FUNC_%s________________________________________WINDOW_TERMINATION_%d________ITERATION_WINDOW_%d____\n", __FUNCTION__, win, obj->window);

		if ( (int) obj->window == (int) win) {
			printf("________FUNC_%s________________________________________TRYING_TO_REMOVE_WINDOW_%d________FOUND%d_________\n", __FUNCTION__, win, obj->window);

		//	if(obj->window == root) return;
			obj->next->prev = obj->prev;
			obj->prev->next = obj->next;
			last = obj->next;
			prog_count--;

			if (mon = get_mon(obj->monitor) ) {
				mon->lasts = root;
				mon->count = mon->count - 1;
			}

			printf("________FUNC_%s________________________________________REMOVED_WINDOW_%d______WINDOW_%d_________________________\n", __FUNCTION__, win, obj->window);
			break;
		}
		obj = obj->next;
	}
	//free(obj);
}


















Atom get_atom(Window window, Atom at) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	int di;
	unsigned long dl;
	unsigned char *p = NULL;
	Atom da, atom = None;
	if (XGetWindowProperty(display, window, at, 0L, sizeof atom, False, XA_ATOM,
			&da, &di, &dl, &dl, &p) == Success && p) {
		atom = *(Atom*) p;
		XFree(p);
	}
	return atom;
}





void everything(Window w) {

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);

	Atom netwmmodal		= XInternAtom(display, "_NET_WM_STATE_MODAL", True);
	Atom netwmsticky 	= XInternAtom(display, "_NET_WM_STATE_STICKY", True);
	Atom netwmmaxvert	= XInternAtom(display, "_NET_WM_STATE_MAXIMIZED_VERT", True);
	Atom netwmmaxhor 	= XInternAtom(display, "_NET_WM_STATE_MAXIMIZED_HORZ", True);
	Atom netwmshaded 	= XInternAtom(display, "_NET_WM_STATE_SHADED", True);
	Atom netwmskiptask 	= XInternAtom(display, "_NET_WM_STATE_SKIP_TASKBAR", True);
