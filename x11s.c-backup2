/*
 ============================================================================
 Name        : x11s.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <signal.h>
#include <stdbool.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <X11/cursorfont.h>
#include <X11/keysym.h>
#include <X11/Xatom.h>
#include <X11/Xlib.h>
#include <X11/Xproto.h>
#include <X11/Xutil.h>
#ifdef XINERAMA
#include <X11/extensions/Xinerama.h>
#endif /* XINERAMA */
//#include <X11/Xft/Xft.h>

#include <stdbool.h>

#define try bool __HadError = false;
#define catch(x) ExitJmp:if(__HadError)
#define throw(x) {__HadError=true; goto ExitJump;}




static int (*xerrorxlib)(Display *, XErrorEvent *);

static int xerrorstart(Display *display, XErrorEvent *e) {
	printf("another instance", -1);
	return -1;
}

static int xerror(Display *display, XErrorEvent *e) {
	printf("request code: %d, error code: %d\n", e->request_code, e->error_code);
	return xerrorxlib(display, e);
}
static int xerrordummy(Display *display, XErrorEvent *e) {
	printf("request code: %d, error code: %d...idle...", e->request_code, e->error_code);
}




//typedef struct Monitor Monitor;

//struct Monitor {
//	Window window;
//	struct Monitor *prev;
//	struct Monitor *next;
//};

//static Monitor *mons;

//struct Monitor *push(Monitor *monitor) {
//	if (monitor->prev == NULL) monitor->prev = (struct Monitor*) malloc(sizeof(struct Monitor));
//	monitor->next = monitor;
//};

static Display *display;
static Window root;

static Window checkwin;

int rootw;

//static Drawable drawable;
static GC gc;
static GC gc_text;

int min_width = 200, min_height = 100;
int border_width = 15;
bool fs_border = false;
int border_color;

unsigned long black, white, red, green, blue;

unsigned long _RGB(int r, int g, int b) {
	return b + (g << 8) + (r << 16);
}

Font font;
Cursor cursor;
Cursor cursor_move;
Cursor cursor_size;

static int screen_def;
unsigned int sw;
unsigned int sh;

bool alt_pressed = false;
bool shift_pressed = false;

int num_monitors = 3;
int curr_monitor = 1;

struct Program *last, *first;
int program_count = 0;

typedef struct Program {
	Window window;
	XWindowAttributes xwa;
	int id;
	int width, height;
	int x, y;

	int x_fs, y_fs, wid_fs, hei_fs;
	int x_rs, y_rs, wid_rs, hei_rs;

	int monitor;
	bool raised;
	bool fullscreen;

	struct Program *prev;
	struct Program *next;
} Program;

void init_programs() {
	last = (struct Program*) malloc(sizeof(struct Program));
	last->window = 666;
	last->raised = false;
	last->fullscreen = false;
	last->next = last;
	last->prev = last;
	first = last;
}

struct Program* add_program(Program *val) {
//        struct Program *obj;
//        obj = (struct Program*) malloc( sizeof( struct Program ) );

//        obj->window = val;
	val->next = first;
	val->prev = last;

	last->next = val;
	last = last->next;
	program_count++;
	val->id = program_count;
//      printf("data %d   |   next %d   |   prev %d\n", last->data, last->next->data, last->p>
}

struct Program* remove_program(Program *val) {
	val->next->prev = val->next;
	val->prev->next = val->prev;
//	free(val);
}

struct Program* get_program(Window val) {
	Program *prog = first;
	if (program_count < 1) return 0;
	for (int i = 0; i < program_count; i++) {
		prog = prog->next;
		if (prog->window == val)
			return prog;
	}
	return 0;
}



Atom netwmstate, netwmfs, netwmtype, netwmdialog;


Atom get_atom(Window window, Atom at) {
	int di;
	unsigned long dl;
	unsigned char *p = NULL;
	Atom da, atom = None;
	if (XGetWindowProperty(display, window, at, 0L, sizeof atom, False, XA_ATOM, &da, &di, &dl, &dl, &p) == Success && p ) {
		atom = *(Atom *)p;
		XFree(p);
	}
	return atom;
}




void change_monitor(int numb) {
	curr_monitor = numb;
	Program *prog = first;

	for (int i = 0; i <= program_count; i++) {
		prog = prog->next;
		if (prog->window != 0) {
			if (prog->monitor != curr_monitor) {

				if (prog->raised) {
					XWindowAttributes xwa;
					XGetWindowAttributes(display, prog->window, &xwa);
					prog->x_rs = xwa.x;
					prog->y_rs = xwa.y;
					prog->width = xwa.width;
					prog->height = xwa.height;
				}

				XMoveResizeWindow(display, prog->window, prog->x,
						(1080 * 2) + 100, prog->width, prog->height);
				prog->raised = false;
			} else {
				XMoveResizeWindow(display, prog->window, prog->x_rs, prog->y_rs,
						prog->width, prog->height);
				prog->raised = true;
			}
		}
	}
}

void fullscreen(Window w) {

	Program *prog = get_program(w);
	if(prog->window != 666 || prog->window > 0) {

		XWindowAttributes xwa;
		XGetWindowAttributes(display, prog->window, &xwa);

		if (prog->monitor == curr_monitor) {
			if (!prog->fullscreen) {
				//	if(xwa.width < sw && xwa.height < sh && xwa.x != 0 && xwa.y != 0) {

				if (!prog->fullscreen) {
					prog->x_fs = xwa.x;
					prog->y_fs = xwa.y;
					prog->wid_fs = xwa.width;
					prog->hei_fs = xwa.height;
				}

				int wid = fs_border ? sw - border_width : sw;
				int hei = fs_border ? sh - border_width : sh;

				Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
				XChangeProperty(display, prog->window, netwmfs, XA_ATOM, 32, PropModeReplace, (unsigned char *) &netwmfs, 1);

				XSetWindowBorderWidth(display, prog->window,
						(fs_border ? border_width : 0));
				XMoveResizeWindow(display, prog->window, 0, 0, wid, hei);
				prog->fullscreen = true;
			} else {
				Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
				XChangeProperty(display, prog->window, netwmstate, XA_ATOM, 32, PropModeReplace, (unsigned char *) &netwmstate, 1);

				XSetWindowBorderWidth(display, prog->window, border_width);
				XMoveResizeWindow(display, prog->window, prog->x_fs, prog->y_fs,
						prog->wid_fs, prog->hei_fs);
				prog->fullscreen = false;
			}
		}
	}
}

Window under_pointer() {
	int ret, pos;
	unsigned int mask;
	Window child, contnr;
	ret = XQueryPointer(display, root, &contnr, &child, &pos, &pos, &pos, &pos,
			&mask);
	if (!ret)
		return 0;
	return ret;
}






void mkill(Window window) {
            XEvent event;
            event.xclient.type = ClientMessage;
            event.xclient.window = window;
            event.xclient.message_type = XInternAtom(display, "WM_PROTOCOLS", True);
            event.xclient.format = 32;
            event.xclient.data.l[0] = XInternAtom(display, "WM_DELETE_WINDOW", False);
            event.xclient.data.l[1] = CurrentTime;
            int result = XSendEvent(display, window, False, NoEventMask, &event);
            XKillClient(display, window);
}






void handle_expose(XExposeEvent *e) {
//	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);
}

void handle_key_press(XKeyEvent *e) {

	switch (XKeycodeToKeysym(display, e->keycode, 0)) {
	case XK_7:
	XSetWindowAttributes attrs;
	attrs.event_mask = ExposureMask | FocusChangeMask | KeyPressMask | StructureNotifyMask | VisibilityChangeMask | ExposureMask;
/*	attrs.event_mask = SubstructureRedirectMask |
			SubstructureNotifyMask |
			StructureNotifyMask |
			ExposureMask |
			KeyPressMask |
			KeyReleaseMask |
			PointerMotionMask |
			ButtonPressMask |
			ButtonReleaseMask |
			EnterWindowMask |
			FocusChangeMask |
			PropertyChangeMask;
*/
	XChangeWindowAttributes(display, e->window, 0, &attrs);
	XMapWindow(display, e->window);
//		Program *prog = get_program(e->window);
//		XMoveResizeWindow(display, prog->window, 0, 0, 100, 100);
		//Window window = under_pointer();
		break;
	case XK_Alt_L:
		alt_pressed = true;
		break;
	case XK_Shift_L:
		shift_pressed = true;
		break;
	case XK_5:
		if (alt_pressed)
			fullscreen(e->window);
		break;
	case XK_1:
		if (e->state & Mod1Mask)
			change_monitor(1);
		break;
	case XK_2:
		if (e->state & Mod1Mask)
			change_monitor(2);
		break;
	case XK_3:
		if (e->state & Mod1Mask)
			change_monitor(3);
		break;
	case XK_0:
		if (alt_pressed) {
			if (fork() == 0) {
				if (display)
					close(ConnectionNumber(display));
				char *cmd[] = { "dmenu_run", NULL };
				setsid();
				execvp(cmd[0], cmd);
				perror("failed");
				exit(EXIT_SUCCESS);
			}
		}
		break;

	case XK_F4:
		if (&e->state && Mod1Mask) {
            XEvent event;
            event.xclient.type = ClientMessage;
            event.xclient.window = e->window;
            event.xclient.message_type = XInternAtom(display, "WM_PROTOCOLS", True);
            event.xclient.format = 32;
            event.xclient.data.l[0] = XInternAtom(display, "WM_DELETE_WINDOW", False);
            event.xclient.data.l[1] = CurrentTime;
            int result = XSendEvent(display, e->window, False, NoEventMask, &event);
            XKillClient(display, e->window);
		}
	}
}

void handle_key_release(XKeyEvent *e) {
	//XkbKeycodeToKeysym(display, e->keycode, 0, 0)
	switch (XKeycodeToKeysym(display, e->keycode, 0)) {
	case XK_Alt_L:
		alt_pressed = false;
		break;
	case XK_Shift_L:
		shift_pressed = false;
		break;
	}
}
                                                                                      
void handle_configure_request(XConfigureRequestEvent *e) {



/////////////////////Every time updates////////////////////////



//	XWindowAttributes xwa;
//	XGetWindowAttributes(display, e->window, &xwa);

	XSetWindowAttributes attrs;
//	attrs.event_mask = ExposureMask | FocusChangeMask | KeyPressMask | StructureNotifyMask | VisibilityChangeMask | ExposureMask;
/*	attrs.event_mask = SubstructureRedirectMask |
	SubstructureNotifyMask |
	StructureNotifyMask |
	ExposureMask |
	KeyPressMask |
	KeyReleaseMask |
	PointerMotionMask |
	ButtonPressMask |
	ButtonReleaseMask |
	EnterWindowMask |
	FocusChangeMask |
	PropertyChangeMask;

	XChangeWindowAttributes(display, e->window, 0, &attrs);
*/

 /*           XEvent event;
            event.xclient.type = ClientMessage;
            event.xclient.window = e->window;
            event.xclient.message_type = XInternAtom(display, "WM_PROTOCOLS", True);
            event.xclient.format = 32;
            event.xclient.data.l[0] = XInternAtom(display, "WM_DELETE_WINDOW", False);
            event.xclient.data.l[1] = CurrentTime;
            int result = XSendEvent(display, e->window, False, NoEventMask, &event);
*/

//	XWindowAttributes xwa;
//	XGetWindowAttributes(display, e->window, &xwa);
//
//	Program *prog = get_program(e->window);


	XWindowAttributes xwa;
	XGetWindowAttributes(display, e->window, &xwa);
//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);
//	XMoveResizeWindow(display, e->window, 200, 200, 500, 500);



		long msize;
		XSizeHints size;
		if (!XGetWMNormalHints(display, e->window, &size, &msize) ) {
			size.flags = PSize;
		}
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.min_width, size.min_height);
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.base_width, size.base_height);





	XSetInputFocus(display, last->window, 0, CurrentTime);

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	Atom netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	Atom netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG", False);

	Atom state = get_atom(e->window, netwmstate);
	Atom type = get_atom(e->window, netwmtype);

	if (state == netwmfs) {
		fullscreen(e->window);
	}
	if(type != netwmdialog) {
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.base_width, size.base_height);

//		XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

	//	XMoveResizeWindow(display, e->window, 1200, 200, 500, 500);
	}

	XSync(display, False);


//	if (xwa.x == 0 && xwa.y == 0) {
//		if (xwa.width < 3 && xwa.height < 3) {
//			XMoveResizeWindow(display, e->window, 0, 0,
//					1920/* - (wc.border_width * 2)*/,
//					1080/* - (wc.border_width * 2)*/);
//		}
//	}

}

void handle_configure_notify(XConfigureEvent *e) {




	XWindowAttributes xwa;
	XGetWindowAttributes(display, e->window, &xwa);

//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

	XSetInputFocus(display, last->window, 0, CurrentTime);

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	Atom netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	Atom netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG", False);

	Atom state = get_atom(e->window, netwmstate);
	Atom type = get_atom(e->window, netwmtype);

	if (state == netwmfs) {
		fullscreen(e->window);
	}
	if(type == netwmdialog) {
//		XMoveResizeWindow(display, e->window, 1200, 200, 500, 500);
	}

/*
	Program *prog = get_program(e->window);
	prog->window = e->window;
	prog->xwa = xwa;
	prog->monitor = curr_monitor;
	prog->raised = true;
	prog->x = xwa.x;
	prog->y = xwa.y;
	prog->width = xwa.width;
	prog->height = xwa.height;
*/


//	XReparentWindow(display, e->window, e->window, 0, 0);

//	XSetWindowBorderWidth(display, e->window, ( ( (xwa.x == 0 && xwa.y == 0) && (xwa.width >= 1920 && xwa.height >= 1080 ) ) ? 0 : border_width ) );
	XSync(display, False);
}

void handle_map_request(XMapRequestEvent *e) {

	Pixmap color = 0x00fefe;

	XGrabKey(display, XKeysymToKeycode(display, XK_Alt_L), AnyModifier,
			e->window, False, GrabModeAsync, GrabModeAsync);

//	XGrabKey(display, XKeysymToKeycode(display, XK_1), Mod4Mask, e->window, False, GrabModeAsync, GrabModeAsync);
//	XGrabKey(display, XKeysymToKeycode(display, XK_2), Mod4Mask, e->window, False, GrabModeAsync, GrabModeAsync);
//	XGrabKey(display, XKeysymToKeycode(display, XK_3), Mod4Mask, e->window, False, GrabModeAsync, GrabModeAsync);


/*	XGrabKey(display, XKeysymToKeycode(display, XK_1),
			XKeysymToKeycode(display, XK_Alt_L), e->window, False,
			GrabModeAsync, GrabModeAsync);
	XGrabKey(display, XKeysymToKeycode(display, XK_2),
			XKeysymToKeycode(display, XK_Alt_L), e->window, False,
			GrabModeAsync, GrabModeAsync);
	XGrabKey(display, XKeysymToKeycode(display, XK_3),
			XKeysymToKeycode(display, XK_Alt_L), e->window, False,
			GrabModeAsync, GrabModeAsync);
*/
	XGrabButton(display, Button1, Mod1Mask, e->window, False,
			ButtonPressMask | ButtonReleaseMask | ButtonMotionMask,
			GrabModeAsync, GrabModeAsync, None, None);
	XGrabButton(display, Button3, Mod1Mask, e->window, False,
			ButtonPressMask | ButtonReleaseMask | ButtonMotionMask,
			GrabModeAsync, GrabModeAsync, None, None);

	XWindowAttributes xwa;
	XGetWindowAttributes(display, e->window, &xwa);

	XSetWindowAttributes attrs;
	attrs.event_mask = ExposureMask | FocusChangeMask | KeyPressMask | StructureNotifyMask | VisibilityChangeMask | ExposureMask;


//	attrs.border_pixel = _RGB(255,66,66);
//	attrs.background_pixel = white;
	int x, y, width, height;
//	XGetWindowAttributes(display, e->window, &xwa);
//	XGetGeometry(display, drawable, e->window, &x, &y, &width, &height, &border_width, &depth);

//	int asd = + 2 * DisplayWidth(display, DefaultScreen(display));

	width = xwa.width < min_width ? min_width : xwa.width;
	height = xwa.height < min_height ? min_height : xwa.height;

//	XWindowChanges wc;
//	wc.border_width = 5;
//	XConfigureWindow(display, e->window, CWBorderWidth,  &wc);
	XSetWindowBorderWidth(display, e->window, border_width);
	XSetWindowBorder(display, e->window, border_color);


	Atom clientlist = XInternAtom(display, "_NET_CLIENT_LIST", 0);
	XChangeProperty(display, root, clientlist, XA_WINDOW, 32, PropModeAppend, (unsigned char *) &(e->window), 1);

//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

	XSetInputFocus(display, e->window, 0, CurrentTime);

	XChangeWindowAttributes(display, e->window, 0, &attrs);

	Atom delWindow = XInternAtom(display, "WM_DELETE_WINDOW", 0);
	XSetWMProtocols(display, e->window, &delWindow, 1);



		long msize;
		XSizeHints size;
		if (!XGetWMNormalHints(display, e->window, &size, &msize) ) {
			size.flags = PSize;
		}
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.min_width, size.min_height);
		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.base_width, size.base_height);




	XSetInputFocus(display, last->window, 0, CurrentTime);

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	Atom netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	Atom netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG", False);

	Atom state = get_atom(e->window, netwmstate);
	Atom type = get_atom(e->window, netwmtype);

	if (state == netwmfs) {
		fullscreen(e->window);
	}
	if(type == netwmdialog) {
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.base_width, size.base_height);

//		XMoveResizeWindow(display, e->window, 1200, 0, 500, 500);
	}






	struct Program *prog;
	prog = (struct Program*) malloc(sizeof(struct Program));
	prog->window = e->window;
	prog->xwa = xwa;
	prog->monitor = curr_monitor;
	prog->raised = true;
	prog->x = xwa.x;
	prog->y = xwa.y;
	prog->width = xwa.width;
	prog->height = xwa.height;
	add_program(prog);

	XRaiseWindow(display, e->window);
	XMapWindow(display, e->window);
	XSync(display, False);
}

void handle_button_press(XButtonEvent *e) {
//	XSetInputFocus(display, e->window, 0, CurrentTime);
	if (alt_pressed) {
		int cx, cy, rx, ry = 0;
		unsigned int maskq = 0;

		XWindowAttributes xwa;
		XGetWindowAttributes(display, e->window, &xwa);

		Window c, r;
		XQueryPointer(display, e->window, &c, &r, &rx, &ry, &cx, &cy, &maskq);

		XRaiseWindow(display, e->window);
//		XSetInputFocus(display, e->window, 0, CurrentTime);
		Cursor cur = (e->button == Button1) ? cursor_move : cursor_size;
		XGrabPointer(display, root, True,
				ButtonPressMask | ButtonReleaseMask | ButtonMotionMask
						| PointerMotionMask, GrabModeAsync, GrabModeAsync, None,
				cur, CurrentTime);
		XEvent ev;

		int wid, hei;

		do {

			XMaskEvent(display,
					ButtonPressMask | ButtonReleaseMask | ButtonMotionMask
							| PointerMotionMask | ExposureMask
							| SubstructureRedirectMask, &ev);
			switch (ev.type) {
			case ConfigureRequest:
			case Expose:
			case MapRequest:
				//handle_map_request(&ev);
				break;
			case MotionNotify:
				unsigned int mask;

				if (e->button == Button1) {
					XMoveWindow(display, e->window, xwa.x + (ev.xmotion.x - rx),
							xwa.y + (ev.xmotion.y - ry));
				} else {
					wid = ev.xmotion.x - (xwa.x);
					hei = ev.xmotion.y - (xwa.y);
					XResizeWindow(display, e->window,
							(wid < min_width ? min_width : wid),
							(hei < min_height ? min_height : hei));
				}

				break;
			}
		} while (ev.type != ButtonRelease);
		XUngrabPointer(display, CurrentTime);
	}
}

void handle_button_release(XButtonEvent *e) {

}

void handle_motion_notify(XMotionEvent *e) {
	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);
}

void handle_unmap_notify(XUnmapEvent *e) {
//
	XGrabServer(display);

	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);

	Program *prog = get_program(e->window);
	if (prog < 0) {
		return;
	}

	if (e->event == root || e->window == root) {
		return;
	}

	XUnmapWindow(display, e->window);

	XSync(display, False);
//	XUngrabServer(display);
}

void handle_destroy_notify(XDestroyWindowEvent *e) {
	XGrabServer(display);
//	XSetErrorHandler(xerrordummy);
	XUngrabButton(display, AnyButton, AnyModifier, e->window);
//	XSetErrorHandler(xerror);

	mkill(e->window);

	Program *prog = first;
	for (int i = 0; i < program_count; i++) {
		prog = prog->next;
		if (prog->window == e->window)
			return remove_program(prog);
	}

	XSync(display, False);
	XUngrabServer(display);
}

void handle_property_notify(XPropertyEvent *e) {

}




int kz(int x) {

	if (signal(SIGCHLD, kz) == SIG_ERR)
		exit(-1);
	while (0 < waitpid(-1, NULL, WNOHANG));
}





void handle_client_message(XClientMessageEvent *e) {
	if (e->message_type == netwmstate) {
		if (e->data.l[1] == netwmfs || e->data.l[2] == netwmfs) {
			fullscreen(e->window);
		}
	}
}







int main(void) {

	kz(0);

	init_programs();

	xerrorxlib = XSetErrorHandler(xerrorstart);

	display = XOpenDisplay(NULL);
	screen_def = DefaultScreen(display);

	sw = DisplayWidth(display, screen_def);
	sh = DisplayHeight(display, screen_def);
	root = RootWindow(display, screen_def);
	rootw = XDefaultRootWindow(display);

	black = BlackPixel(display, screen_def);
	white = WhitePixel(display, screen_def);

	XGrabServer(display);

	XSetErrorHandler(xerrordummy);

	XUngrabServer(display);

//	Atom delWindow = XInternAtom(display, "WM_DELETE_WINDOW", 0);
//	XSetWMProtocols(display, root, &delWindow, 1);

	Atom wmname = XInternAtom(display, "_NET_WM_NAME", 0);
	Atom wmcheck = XInternAtom(display, "_NET_WM_SUPPORTING_WM_CHECK", 0);

	Atom netsupport = XInternAtom(display, "_NET_SUPPORTED", 0);
	Atom clientlist = XInternAtom(display, "_NET_CLIENT_LIST", 0);


	checkwin = XCreateSimpleWindow(display, root, 0, 0, 1, 1, 0, 0 ,0);

	Atom utfstr;


	netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG", False);

	XChangeProperty(display, checkwin, wmcheck, XA_WINDOW, 32, PropModeReplace, (unsigned char *) &checkwin, 1);
	XChangeProperty(display, checkwin, wmname, utfstr, 32, PropModeReplace, (unsigned char *) "asd", 1);

	XChangeProperty(display, root, wmcheck, XA_WINDOW, 32, PropModeReplace, (unsigned char *) &checkwin, 1);
	XChangeProperty(display, root, netsupport, XA_WINDOW, 32, PropModeReplace, (unsigned char *) &checkwin, 1);
	XDeleteProperty(display, root, clientlist);



	XSync(display, False);
	XFlush(display);

	font = XLoadFont(display, "-*-*-*-R-Normal--*-180-100-100-*-*");
	cursor = XCreateFontCursor(display, XC_left_ptr);
	cursor_move = XCreateFontCursor(display, XC_fleur);
	cursor_size = XCreateFontCursor(display, XC_sizing);

	border_color = _RGB(255, 66, 66);

//	sigset_t sigmask, oldsigmask;
//	sigprocmask(2, &sigmask, &oldsigmask);

	XSetWindowAttributes attrs;
	attrs.event_mask = SubstructureRedirectMask |
				SubstructureRedirectMask |
				SubstructureNotifyMask |
				StructureNotifyMask |
				ExposureMask |
				KeyPressMask |
				KeyReleaseMask |
				PointerMotionMask |
				ButtonPressMask |
				ButtonReleaseMask |
				EnterWindowMask |
				LeaveWindowMask |
				FocusChangeMask |
				PropertyChangeMask;

	attrs.do_not_propagate_mask = 0;

	attrs.cursor = cursor;
//	attrs.background_pixel = _RGB(66,66,66);
//	attrs.foreground_pixel = _RGB(66,66,66);
	unsigned long attrs_mask = CWEventMask | NoEventMask | CWBackPixel;

	XSelectInput(display, root, attrs.event_mask);
	XSync(display, False);

	XChangeWindowAttributes(display, root, CWEventMask | CWCursor, &attrs);






	XGrabKey(display, XKeysymToKeycode(display, XK_1),
			XKeysymToKeycode(display, XK_Alt_L), root, False,
			GrabModeAsync, GrabModeAsync);
	XGrabKey(display, XKeysymToKeycode(display, XK_2),
			XKeysymToKeycode(display, XK_Alt_L), root, False,
			GrabModeAsync, GrabModeAsync);
	XGrabKey(display, XKeysymToKeycode(display, XK_3),
			XKeysymToKeycode(display, XK_Alt_L), root, False,
			GrabModeAsync, GrabModeAsync);









//	XSync(display, False);
//
//	XGCValues xgc;
//	xgc.background = white;
//	xgc.foreground = black;
//	gc = XCreateGC(display, root, GCForeground | GCBackground, &xgc);
//
//	XFillRectangle(display, root, gc, 0, 0, sw, sh);
//
//	gc_text = XCreateGC(display, root, GCForeground | GCBackground, &xgc);
//	XSetFont(display, gc_text, font);
//
//	XMapWindow(display, root);

	XSync(display, False);
	XFlush(display);

	XSync(display, False);

	Atom wm_delete_window = XInternAtom(display, "WM_DELETE_WINDOW", 0);

	XEvent e;
	XSync(display, False);
	while (1) {

		XNextEvent(display, &e);

		switch (e.type) {
		case ClientMessage:
			if( (Atom)e.xclient.data.l[0] == wm_delete_window) {
				//mkill(&e.xclient);
			}
			handle_client_message(&e.xclient);

/*
			Atom state = get_atom(e->window, netwmstate);
			Atom type = get_atom(e->window, netwmtype);

			if (state == netwmfs) {
				fullscreen(e->window);
			}
			if(type != netwmdialog) {
				XMoveResizeWindow(display, e->window, 1200, 200, 500, 500);
			}
			break;
*/
		
		case Expose:
			handle_expose(&e.xexpose);
			break;
		case KeyPress:
			handle_key_press(&e.xkey);
			break;
		case KeyRelease:
			handle_key_release(&e.xkey);
			break;
		case ConfigureRequest:
			handle_configure_request(&e.xconfigurerequest);
			break;
		case ConfigureNotify:
			handle_configure_notify(&e.xconfigure);
			break;
		case MapRequest:
			handle_map_request(&e.xmaprequest);
			break;
		case ButtonPress:
			handle_button_press(&e.xbutton);
			break;
		case ButtonRelease:
			handle_button_release(&e.xbutton);
			break;
		case MotionNotify:
			handle_motion_notify(&e.xmotion);
			break;
		case UnmapNotify:
//			handle_unmap_notify(&e.xunmap);
			break;

		case DestroyNotify:
//			handle_destroy_notify(&e.xdestroywindow);
			break;

		case PropertyNotify:
			handle_property_notify(&e.xproperty);
			break;
//		case UnmapNotify:
//			handle_unmap_notify(&e.xunmap);
//			break;					
		}

	}
	return EXIT_SUCCESS;
}
