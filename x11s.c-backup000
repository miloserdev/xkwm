/*
 ============================================================================
 Name        : x11s.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

//#include <bits/signum-arch.h>
//#include <bits/signum-generic.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <X11/cursorfont.h>
#include <X11/keysymdef.h>
#include <X11/X.h>
#include <X11/Xatom.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#ifdef XINERAMA
#include <X11/extensions/Xinerama.h>
#endif /* XINERAMA */
//#include <X11/Xft/Xft.h>

#include <stdbool.h>

#define try bool __HadError = false;
#define catch(x) ExitJmp:if(__HadError)
#define throw(x) {__HadError=true; goto ExitJump;}


#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))


static int (*xerrorxlib)(Display*, XErrorEvent*);

static int xerrorstart(Display *display, XErrorEvent *e) {
	printf("another instance\n", -1);
	return -1;
}

static int xerror(Display *display, XErrorEvent *e) {
	printf("request code: %d, error code: %d\n", e->request_code,
			e->error_code);
	return xerrorxlib(display, e);
}
static int xerrordummy(Display *display, XErrorEvent *e) {
	printf("request code: %d, error code: %d...idle...   \n", e->request_code,
			e->error_code);
}



static Display *display;
static Window root;

static Window checkwin;

int rootw;

//static Drawable drawable;
static GC gc;
static GC gc_text;

int min_width = 200, min_height = 100;
int border_width = 3;
bool fs_border = false;
int border_color;

unsigned long black, white, red, green, blue;

unsigned long _RGB(int r, int g, int b) {
	return b + (g << 8) + (r << 16);
}

Font font;
Cursor cursor;
Cursor cursor_move;
Cursor cursor_size;

static int screen_def;
unsigned int sw;
unsigned int sh;

bool alt_pressed = false;
bool shift_pressed = false;

int num_monitors = 3;
int curr_monitor = 1;

struct Program *last, *first;
int program_count = 0;

/*
typedef struct Program {
	Window window;
	XWindowAttributes xwa;
	int id;
	int width, height;
	int x, y;

	int x_fs, y_fs, wid_fs, hei_fs;
	int x_rs, y_rs, wid_rs, hei_rs;

	int monitor;
	bool raised;
	bool fullscreen;

	struct Program *prev;
	struct Program *next;
} Program;

void init_programs() {
	last = (struct Program*) malloc(sizeof(struct Program));
	last->window = 0;
	last->raised = false;
	last->fullscreen = false;
	last->next = last;
	last->prev = last;
	first = last;
}

struct Program* add_program(Program *val) {

	val->next = first;
	val->prev = last;

	last->next = val;
	last = last->next;
	program_count++;
	val->id = program_count;
}

struct Program* get_program0(Window val) {
	if ( program_count < 1 || program_count == 0 ) { return NULL; }
	if ( val == root || val == rootw ) { return NULL; }

	Program *prog = first;
	for (int i = 0; i < program_count; i++) {
		prog = prog->next;
		if (prog->window == val && val != root)
			return prog;
	}
	return NULL;
}

struct Program* get_program(Window val) {
	Program *prog = first;
	for (int i = 0; i <= program_count+1; i++) {
		if (prog->window == val) {
			printf("DEBUG X11 func: %s | found: %d\n", __FUNCTION__, prog->window);
			return prog;
		}
		prog = prog->next;

	}
	return NULL;
}

struct Program* remove_program(Program *val) {


//	prev->next = elem->next;
//	next->prev = elem->prev;

	printf("DEBUG X11 func: %s\n", __FUNCTION__);
	Program **pr;
	for(pr = first; *pr != val; pr = &(*pr)->next);
	printf("DEBUG X11 func: %s\n", __FUNCTION__);
	*pr = &(*pr)->next;
	printf("DEBUG X11 func: %s\n", __FUNCTION__);


//	val->next->prev = val->prev;
//	val->prev->next = val->next;

	program_count--;
	free(val);
}


struct Program* remove_programe(Program *val) {
	printf("DEBUG X11 func: %s\n", __FUNCTION__);

	Program *prev;
	Program *next;
	Program *prog = first;

	printf("DEBUG X11 func: %s\n", __FUNCTION__);
//	printf("DEBUG X11 func: %s prev: %d | next: %d | prog: %d\n", __FUNCTION__, prev->id, next->id, prog->id);

	for (int i = 0; i <= program_count; i++) {
		if (prog->next == val) prev = prog;
		if (prog->prev == val) next = prog;
		prog = prog->next;
	}

	printf("DEBUG X11 func: %s\n", __FUNCTION__);


	prev->next = 0;
	next->prev = 0;

	printf("DEBUG X11 func: %s\n", __FUNCTION__);

	prev->next = val->next;
	next->prev = val->prev;

	printf("DEBUG X11 func: %s\n", __FUNCTION__);

}
*/













typedef struct s_prog {
	Window window;
	XWindowAttributes xwa;
	int id;
	int width, height;
	int x, y;

	int x_fs, y_fs, wid_fs, hei_fs;
	int x_rs, y_rs, wid_rs, hei_rs;

	int monitor;
	bool raised;
	bool fullscreen;

	struct s_prog *prev;
	struct s_prog *next;
} t_prog;




t_prog *nullprog, *programs;


t_prog *cr_prog_list() {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	t_prog *prog = (t_prog *) malloc( sizeof(t_prog) );
	prog->window = NULL;
	prog->next = prog->prev  = NULL;
	return prog;
}

t_prog *add_prog(Window win) {
	printf("________FUNC_%s______WIN_TO_ADD_%d___\n", __FUNCTION__, win);

	program_count++;
	t_prog *prog = (t_prog *) malloc( sizeof(t_prog) );
	prog->id = program_count;
	prog->window = win;
	prog->next = NULL;

	prog->next = &(*programs);
	programs = prog;

//	t_prog **list = programs;
//	*list = prog;

	printf("________FUNC_%s______WIN_ADDED_%d_____PROG_COUNT_%d\n", __FUNCTION__, prog->window, program_count);


	return prog;
}

t_prog *get_prog(Window win) {
	printf("________FUNC_%s__0________\n", __FUNCTION__);

	t_prog *prog;
	for(prog = programs; prog->window != win; prog = prog->next) {
		printf("________FUNC_%s__ITERATION_________TO_GET_WINDOW_%d______WINDOW_%d\n", __FUNCTION__, win, prog->window);
		if (prog->window == win) return prog;
	}

/*	t_prog *prog = programs;
	for(int i = 0; i <= program_count; i++) {
	printf("________FUNC_%s__1________\n", __FUNCTION__);
		if (prog->window == win) return prog;
//		prog = prog->next;
		if (prog->next != NULL) prog = prog->next;
	printf("________FUNC_%s__2________\n", __FUNCTION__);

	}*/
	return programs;
}


t_prog *get_prog_p(t_prog *val) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	t_prog *prog = programs;
	for(int i = 0; i <= program_count; i++) {
		if (prog == val) return prog;
//		prog = prog->next;
		if (prog->next != NULL) prog = prog->next;

	}
	return NULL;
}


void *rem_prog(t_prog *prog) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	t_prog *elm = NULL;
	t_prog *tmp = NULL;
	elm = get_prog_p(prog);
	if (elm == NULL) return;

	if(elm->prev) elm->prev->next = elm->next;
	if(elm->next) elm->next->prev = elm->prev;

	tmp = elm->window;

	if(!elm->prev) prog->next = elm->next;
	if(!elm->next) prog->prev = elm->prev;

	free(elm);

//	prog = prog->next;
//	free(prog);
	program_count--;
}

















Atom netwmstate, netwmfs, netwmtype, netwmdialog;


Atom AtomUTF8, AtomNetSupported, AtomNetWMName, AtomNetWMState, AtomNetWMCheck, AtomNetWMFullscreen, AtomNetActiveWindow, AtomNetWMWindowType, AtomNetWMWindowTypeDialog, AtomNetClientList;


Atom AtomWMProtocols, AtomWMDelete, AtomWMState, AtomWMTakeFocus;

Atom get_atom(Window window, Atom at) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	int di;
	unsigned long dl;
	unsigned char *p = NULL;
	Atom da, atom = None;
	if (XGetWindowProperty(display, window, at, 0L, sizeof atom, False, XA_ATOM,
			&da, &di, &dl, &dl, &p) == Success && p) {
		atom = *(Atom*) p;
		XFree(p);
	}
	return atom;
}


// #change_monitor #changmon

void change_monitor(int numb) {
	printf("________FUNC_%s_____PROG_COUNT_____\n", __FUNCTION__, program_count);

	curr_monitor = numb;
//	Program *prog = first;
	t_prog *prog = programs;
//	t_prog *prog = programs->next;

	for (int i = 0; i <= program_count; i++) {
//		if (prog->next != NULL) prog = prog->next;
		if (prog->window != 0) {
			if (prog->monitor != curr_monitor) {

				if (prog->raised) {
					XWindowAttributes xwa;
					XGetWindowAttributes(display, prog->window, &xwa);
					prog->x_rs = xwa.x;
					prog->y_rs = xwa.y;
					prog->width = xwa.width;
					prog->height = xwa.height;
				}

				XMoveResizeWindow(display, prog->window, prog->x,
						(1080 * 2) + 100, prog->width, prog->height);
				prog->raised = false;
			} else {
				if (!prog->raised) {
					XMoveResizeWindow(display, prog->window, prog->x_rs, prog->y_rs,
							prog->width, prog->height);
					prog->raised = true;
				}
			}
		}
	prog = prog->next;
	}
}

// #fullscreen

void fullscreen(Window w) {

//	if (w == root) return;

	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, w);

//	Program *prog = get_program(w);
	t_prog *prog = get_prog(w);
	printf("________FUNC_%s__________PROG%d\n", __FUNCTION__, prog->window);


	if(prog == NULL) return;

	if (prog->window != 0 && prog->window != rootw) {

		XWindowAttributes xwa;
		XGetWindowAttributes(display, prog->window, &xwa);

		if (prog->monitor == curr_monitor) {
			if (!prog->fullscreen) {

				if (!prog->fullscreen) {
					prog->x_fs = xwa.x;
					prog->y_fs = xwa.y;
					prog->wid_fs = xwa.width;
					prog->hei_fs = xwa.height;
				}

				int wid = fs_border ? sw - border_width : sw;
				int hei = fs_border ? sh - border_width : sh;

//				Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
//				XChangeProperty(display, prog->window, netwmfs, XA_ATOM, 32, PropModeReplace, (unsigned char*) &netwmfs, 1);

				XSetWindowBorderWidth(display, prog->window,
						(fs_border ? border_width : 0));
				XMoveResizeWindow(display, prog->window, 0, 0, wid, hei);
				prog->fullscreen = true;
			} else {
//				Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
//				XChangeProperty(display, prog->window, netwmstate, XA_ATOM, 32, PropModeReplace, (unsigned char*) &netwmstate, 1);

				XSetWindowBorderWidth(display, prog->window, border_width);
				XMoveResizeWindow(display, prog->window, prog->x_fs, prog->y_fs,
						prog->wid_fs, prog->hei_fs);
				prog->fullscreen = false;
			}
		}
	}
}

Window under_pointer() {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	int ret, pos;
	unsigned int mask;
	Window child, contnr;
	ret = XQueryPointer(display, root, &contnr, &child, &pos, &pos, &pos, &pos,
			&mask);
	if (!ret)
		return 0;
	return ret;
}

void mkill(Window window) {
	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, window);

	XEvent event;
	event.xclient.type = ClientMessage;
	event.xclient.window = window;
	event.xclient.message_type = XInternAtom(display, "WM_PROTOCOLS", True);
	event.xclient.format = 32;
	event.xclient.data.l[0] = XInternAtom(display, "WM_DELETE_WINDOW", False);
	event.xclient.data.l[1] = CurrentTime;
	int result = XSendEvent(display, window, False, NoEventMask, &event);
	XKillClient(display, window);
}

void handle_expose(XExposeEvent *e) {
	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, e->window);

	t_prog *progg = programs;
	for(int i = 0; i <= program_count; i++) {
		printf("________FUNC_%s______________________________FOUND__%d______\n", __FUNCTION__, progg->window);
		if (progg->next != NULL) progg = progg->next;
	}


//	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);
}

void handle_key_press(XKeyEvent *e) {

	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, e->window);

/*	t_prog *progg = programs;
	for (int i = 0; i <= program_count+3; i++) {
		printf("found: %d\n", progg->window);
		if (progg->next != NULL) progg = progg->next;
	}
*/
	printf("DEBUG X11 func: %s program count: %d\n", __FUNCTION__, program_count);

	switch (XKeycodeToKeysym(display, e->keycode, 0)) {

	printf("________FUNC_%s__________\nSWITCH", __FUNCTION__);

	case XK_7:


//		XSetWindowAttributes attrs;
//		attrs.event_mask = ExposureMask | FocusChangeMask | KeyPressMask
//				| StructureNotifyMask | VisibilityChangeMask | ExposureMask;
//		XChangeWindowAttributes(display, e->window, 0, &attrs);
//		XMapWindow(display, e->window);
		break;
	case XK_Alt_L:
			printf("DEBUG X11 func: %s ALT\n", __FUNCTION__);

		alt_pressed = true;
		break;
	case XK_Shift_L:
			printf("DEBUG X11 func: %s SHIFT\n", __FUNCTION__);

		shift_pressed = true;
		break;
	case XK_Return:
			printf("DEBUG X11 func: %s RETURN\n", __FUNCTION__);

		if (alt_pressed)
			fullscreen(e->window);
		break;
	case XK_5:
		if (e->state & Mod1Mask) {
			printf("DEBUG X11 func: %s KEYPRESS PROG\n", __FUNCTION__);

			int gap = 10;
//			Program *prog = first;
//			t_prog *prog = get_prog(e->window);
			t_prog *prog = programs;
			printf("________FUNC_%s__________PROG%d\n", __FUNCTION__, prog->window);


			printf("DEBUG X11 func: %s KEYPRESS PROG: %d\n", __FUNCTION__, prog->window);

			// if (prog->window == NULL) return;

			int _sw = sw, _sh = sh;

			int _x = 0, _y = 0;
			for (int i = 0; i <= program_count+1; i++) {
				if(prog->next == NULL) return;
				printf("prog = prog->next;");
				if(prog->monitor == curr_monitor) {

				//	#stack


					//if (i < 1) {
					//	XMoveResizeWindow(display, prog->window, 0, 0, sw / 2, sh);
					//	xnext = xfirst + xsecond;
					//	xfirst = xsecond;
					//} else {
						if (i % 2 != 0) {
						//	y = sh * 2;
							_sw = _sw / 2;
							if (i >= program_count-1) _sw = _sw * 2;
						} else {
						//	x = sw * 2;
							_sh = _sh / 2;
							if (i >= program_count-1) _sh = _sh * 2;
						}

						XMoveResizeWindow(display, prog->window, _x, _y, _sw, _sh);

						if (i % 2 != 0) {
							_x = _x + _sw;
						} else {
							_y = _y + _sh;
						}

					//}

					//if (i == program_count) XMoveResizeWindow(display, prog->window, sw / (i-1), sh / (i-1), sw, sh );
					//printf("xnext: %d | xfirst: %d | xsecond: %d", xnext, xfirst, xsecond);

					XWindowAttributes xwa;
					XGetWindowAttributes(display, prog->window, &xwa);
					prog->x_rs = xwa.x;
					prog->y_rs = xwa.y;
					prog->width = xwa.width;
					prog->height = xwa.height;

					//lx = lw * i + border_width;


//					XMoveResizeWindow(display, prog->window, lx + (i > 0 ? gap : 0), ly, lw - border_width*2 - gap, lh - border_width*2 - ly*2 );

				}
//				if (prog->next != NULL) prog = prog->next;
				prog = prog->next;
			}
		}
		break;
	case XK_1:
		if (e->state & Mod1Mask)
			change_monitor(1);
		break;
	case XK_2:
		if (e->state & Mod1Mask)
			change_monitor(2);
		break;
	case XK_3:
		if (e->state & Mod1Mask)
			change_monitor(3);
		break;
	case XK_0:
		if (alt_pressed) {
			if (fork() == 0) {
				if (display)
					close(ConnectionNumber(display));
				char *cmd[] = { "dmenu_run", NULL };
				setsid();
				execvp(cmd[0], cmd);
				perror("failed");
				exit(EXIT_SUCCESS);
			}
		}
		break;

	case XK_F4:
		if (&e->state && Mod1Mask) {
			XEvent event;
			event.xclient.type = ClientMessage;
			event.xclient.window = e->window;
			event.xclient.message_type = XInternAtom(display, "WM_PROTOCOLS",
					True);
			event.xclient.format = 32;
			event.xclient.data.l[0] = XInternAtom(display, "WM_DELETE_WINDOW",
					False);
			event.xclient.data.l[1] = CurrentTime;
			int result = XSendEvent(display, e->window, False, NoEventMask,
					&event);
			XKillClient(display, e->window);
		}
		break;
	}
}

void handle_key_release(XKeyEvent *e) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	//XkbKeycodeToKeysym(display, e->keycode, 0, 0)
	switch (XKeycodeToKeysym(display, e->keycode, 0)) {
	case XK_Alt_L:
		alt_pressed = false;
		break;
	case XK_Shift_L:
		shift_pressed = false;
		break;
	}
}

void handle_configure_request(XConfigureRequestEvent *e) {

	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, e->window);


/////////////////////Every time updates////////////////////////

	XSetWindowAttributes attrs;

//	XWindowAttributes xwa;
//	XGetWindowAttributes(display, e->window, &xwa);
//
//	Program *prog = get_program(e->window);

	XWindowAttributes xwa;
	XGetWindowAttributes(display, e->window, &xwa);
//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

	long msize;
	XSizeHints size;
	if (!XGetWMNormalHints(display, e->window, &size, &msize)) {
		size.flags = PSize;
	}
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.min_width, size.min_height);
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.base_width, size.base_height);

//	XSetInputFocus(display, last->window, 0, CurrentTime);

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	Atom netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	Atom netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG",
			False);

	Atom state = get_atom(e->window, netwmstate);
	Atom type = get_atom(e->window, netwmtype);

	if (state == netwmfs) {
		fullscreen(e->window);
	}
	if (type != netwmdialog) {
	}

	XSync(display, False);

}

void handle_configure_notify(XConfigureEvent *e) {

	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, e->window);


	XWindowAttributes xwa;
	XGetWindowAttributes(display, e->window, &xwa);

//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

//	XSetInputFocus(display, last->window, 0, CurrentTime);

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	Atom netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	Atom netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG",
			False);

	Atom state = get_atom(e->window, netwmstate);
	Atom type = get_atom(e->window, netwmtype);

	if (state == netwmfs) {
		fullscreen(e->window);
	}
	if (type == netwmdialog) {
//		XMoveResizeWindow(display, e->window, 1200, 200, 500, 500);
	}

//	XReparentWindow(display, e->window, e->window, 0, 0);
//	XSetWindowBorderWidth(display, e->window, ( ( (xwa.x == 0 && xwa.y == 0) && (xwa.width >= 1920 && xwa.height >= 1080 ) ) ? 0 : border_width ) );
	XSync(display, False);
}

void handle_map_request(XMapRequestEvent *e) {
	printf("DEBUG X11 func: %s window: %d\n", __FUNCTION__, e->window);


	t_prog *progg = programs;
	for(int i = 0; i <= program_count; i++) {
		printf("________FUNC_%s______________________________________FOUND__%d______\n", __FUNCTION__, progg->window);
		if (progg->next != NULL) progg = progg->next;
	}


	Pixmap color = 0x00fefe;

	XGrabKey(display, XKeysymToKeycode(display, XK_Alt_L), AnyModifier,
			e->window, False, GrabModeAsync, GrabModeAsync);

//	XGrabKey(display, XKeysymToKeycode(display, XK_1), Mod4Mask, e->window, False, GrabModeAsync, GrabModeAsync);
//	XGrabKey(display, XKeysymToKeycode(display, XK_2), Mod4Mask, e->window, False, GrabModeAsync, GrabModeAsync);
//	XGrabKey(display, XKeysymToKeycode(display, XK_3), Mod4Mask, e->window, False, GrabModeAsync, GrabModeAsync);

	/*	XGrabKey(display, XKeysymToKeycode(display, XK_1),
	 XKeysymToKeycode(display, XK_Alt_L), e->window, False,
	 GrabModeAsync, GrabModeAsync);
	 XGrabKey(display, XKeysymToKeycode(display, XK_2),
	 XKeysymToKeycode(display, XK_Alt_L), e->window, False,
	 GrabModeAsync, GrabModeAsync);
	 XGrabKey(display, XKeysymToKeycode(display, XK_3),
	 XKeysymToKeycode(display, XK_Alt_L), e->window, False,
	 GrabModeAsync, GrabModeAsync);
	 */
	XGrabButton(display, Button1, Mod1Mask, e->window, False,
	ButtonPressMask | ButtonReleaseMask | ButtonMotionMask,
	GrabModeAsync, GrabModeAsync, None, None);
	XGrabButton(display, Button3, Mod1Mask, e->window, False,
	ButtonPressMask | ButtonReleaseMask | ButtonMotionMask,
	GrabModeAsync, GrabModeAsync, None, None);

	XWindowAttributes xwa;
	XGetWindowAttributes(display, e->window, &xwa);

	XSetWindowAttributes attrs;
	attrs.event_mask = ExposureMask | FocusChangeMask | KeyPressMask
			| StructureNotifyMask | VisibilityChangeMask | ExposureMask;

//	attrs.border_pixel = _RGB(255,66,66);
//	attrs.background_pixel = white;
	int x, y, width, height;
//	XGetWindowAttributes(display, e->window, &xwa);
//	XGetGeometry(display, drawable, e->window, &x, &y, &width, &height, &border_width, &depth);

//	width = xwa.width < min_width ? min_width : xwa.width;
//	height = xwa.height < min_height ? min_height : xwa.height;

	XSetWindowBorderWidth(display, e->window, border_width);
	XSetWindowBorder(display, e->window, border_color);

	XChangeProperty(display, root, AtomNetClientList, XA_WINDOW, 32, PropModeAppend,
			(unsigned char*) &(e->window), 1);

//	XMoveResizeWindow(display, e->window, xwa.x, xwa.y, xwa.width, xwa.height);

//	XSetInputFocus(display, e->window, 0, CurrentTime);

	XChangeWindowAttributes(display, e->window, 0, &attrs);

	Atom delWindow = XInternAtom(display, "WM_DELETE_WINDOW", 0);
	XSetWMProtocols(display, e->window, &delWindow, 1);




	long msize;
	XSizeHints size;
	if (!XGetWMNormalHints(display, e->window, &size, &msize)) {
		size.flags = PSize;
	}

	x = xwa.x < 1 ? (sw / 2) - (xwa.width / 2) : xwa.x;
	y = xwa.y < 1 ? (sh / 2) - (xwa.height / 2) : xwa.y;
	XMoveWindow(display, e->window, x, y);

	width = MAX(size.base_width, xwa.width);
	height = MAX(size.base_height, xwa.height);

	width = MAX(size.min_width, width);
	height = MAX(size.min_height, height);

//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.min_width, size.min_height);
//	XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, width, height);
	if (xwa.x < 250 || xwa.y < 250) XResizeWindow(display, e->window, width, height);

	XSetTransientForHint(display, root, e->window);


//	XSetInputFocus(display, last->window, 0, CurrentTime);

	Atom netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	Atom netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	Atom netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	Atom netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG",
			False);

	Atom state = get_atom(e->window, netwmstate);
	Atom type = get_atom(e->window, netwmtype);

	if (state == netwmfs) {
		fullscreen(e->window);
	}
	if (type == netwmdialog) {
//		XMoveResizeWindow(display, e->window, size.min_aspect.x, size.min_aspect.y, size.base_width, size.base_height);

//		XMoveResizeWindow(display, e->window, 1200, 0, 500, 500);
	}

//	struct Program *prog;
//	prog = (struct Program*) malloc(sizeof(struct Program));
//	prog = (struct t_prog*) malloc(sizeof(struct t_prog));
	t_prog *prog = add_prog(e->window);
	prog->window = e->window;
	prog->xwa = xwa;
	prog->monitor = curr_monitor;
	prog->raised = true;
	prog->x = xwa.x;
	prog->y = xwa.y;
	prog->width = xwa.width;
	prog->height = xwa.height;
//	add_program(prog);

	printf("________FUNC_%s__ITERATION_________TO_GET_WINDOW_%d______WINDOW_%d\n", __FUNCTION__, e->window, prog->window);


	printf("DEBUG X11 								new Program %d\n", prog->window);

	XRaiseWindow(display, e->window);
	XMapWindow(display, e->window);
	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);
}

void handle_button_press(XButtonEvent *e) {
	printf("________FUNC_%s_______WINDOW_%d\n", __FUNCTION__, e->window);

//	XSetInputFocus(display, e->window, 0, CurrentTime);
	if (alt_pressed) {

//		Program *prog = get_program(e->window);

		t_prog *prog = get_prog(e->window);

		printf("_______FUNC_%s_______PROG_%d\n", __FUNCTION__, prog->window);

		int cx, cy, rx, ry = 0;
		unsigned int maskq = 0;

		XWindowAttributes xwa;
		XGetWindowAttributes(display, e->window, &xwa);

		Window c, r;
		XQueryPointer(display, e->window, &c, &r, &rx, &ry, &cx, &cy, &maskq);

		XRaiseWindow(display, e->window);
		XSetInputFocus(display, e->window, 0, CurrentTime);
		Cursor cur = (e->button == Button1) ? cursor_move : cursor_size;
		XGrabPointer(display, root, True,
				ButtonPressMask | ButtonReleaseMask | ButtonMotionMask
						| PointerMotionMask, GrabModeAsync, GrabModeAsync, None,
				cur, CurrentTime);
		XEvent ev;

		int wid, hei;

		do {

			XMaskEvent(display,
					ButtonPressMask | ButtonReleaseMask | ButtonMotionMask
							| PointerMotionMask | ExposureMask
							| SubstructureRedirectMask, &ev);
			switch (ev.type) {
			case ConfigureRequest:
			case Expose:
			case MapRequest:
				if (prog->fullscreen) fullscreen(e->window);
				//handle_map_request(&ev);
				break;
			case MotionNotify:
				XSetTransientForHint(display, root, e->window);

				unsigned int mask;

				if (e->button == Button1) {
					XMoveWindow(display, e->window, xwa.x + (ev.xmotion.x - rx),
							xwa.y + (ev.xmotion.y - ry));
				} else {
					wid = ev.xmotion.x - (xwa.x);
					hei = ev.xmotion.y - (xwa.y);
					XResizeWindow(display, e->window,
							(wid < min_width ? min_width : wid),
							(hei < min_height ? min_height : hei));
				}

				break;
			}
		} while (ev.type != ButtonRelease);
		XUngrabPointer(display, CurrentTime);
	}
}

void handle_button_release(XButtonEvent *e) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

}

void handle_motion_notify(XMotionEvent *e) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);
}

void handle_unmap_notify(XUnmapEvent *e) {

	printf("DEBUG X11 func: %s | window: %d \n", __FUNCTION__, e->window);


	t_prog *progg = programs;
	for(int i = 0; i <= program_count; i++) {
		printf("________FUNC_%s__________________________________________FOUND__%d______\n", __FUNCTION__, progg->window);
		if (progg->next != NULL) progg = progg->next;
	}

//
	XGrabServer(display);

	XSetInputFocus(display, e->window, 0, CurrentTime);
	XSync(display, False);

//	Program *prog = get_program(e->window);
	t_prog *prog = get_prog(e->window);
	printf("________FUNC_%s__________PROG%d\n", __FUNCTION__, prog->window);

//	if (prog != NULL) remove_program(prog);

/*	if (prog->window < 1) {
		return;
	}

	if (e->event == root || e->window == root) {
		return;
	}*/

	XUnmapWindow(display, e->window);
	XSync(display, False);
	XUngrabServer(display);
}

void handle_destroy_notify(XDestroyWindowEvent *e) {

	printf("________FUNC_%s__________\n", __FUNCTION__);


//	Program *progg = first;
	t_prog *progg = programs;
/*	for (int i = 0; i <= program_count+3; i++) {
		printf("found: %d\n", progg->window);
		progg = progg->next;
		if (progg == NULL) return;
	}
*/

	printf("DEBUG X11 func: %s | window: %d \n", __FUNCTION__, e->window);

	XGrabServer(display);

	mkill(e->window);
	printf("DEBUG X11 func: %s | window: %d \n", __FUNCTION__, e->window);

//	Program *prog = get_program(e->window);

//	t_prog *prog = get_prog(e->window);
//	if (prog->next != NULL) prog = prog->next;

//	if (program_count >= 1) prog = prog->next;

//	remove_program(prog);
	printf("DEBUG X11 func: %s | window: %d \n", __FUNCTION__, e->window);

//	XSetErrorHandler(xerrordummy);
//	XUngrabButton(display, AnyButton, AnyModifier, e->window);
//	XSetErrorHandler(xerror);

	XSync(display, False);
	XUngrabServer(display);

}

void handle_property_notify(XPropertyEvent *e) {
	printf("DEBUG X11 func: %s | window: %d \n", __FUNCTION__, e->window);
}

int kz(int x) {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	if (signal(SIGCHLD, kz) == SIG_ERR)
		exit(-1);
	while (0 < waitpid(-1, NULL, WNOHANG))
		;
}

void handle_client_message(XClientMessageEvent *e) {
	printf("DEBUG X11 func: %s | window: %d \n", __FUNCTION__, e->window);

	if (e->message_type == netwmstate) {
		if (e->data.l[1] == netwmfs || e->data.l[2] == netwmfs) {
			fullscreen(e->window);
		}
	}
}


void init_atoms() {
	printf("________FUNC_%s__________\n", __FUNCTION__);

	AtomUTF8 = XInternAtom(display, "UTF8_STRING", False);

	AtomWMProtocols = XInternAtom(display, "WM_PROTOCOLS", 0);
	AtomWMDelete = XInternAtom(display, "WM_DELETE_WINDOW", 0);
	AtomWMState = XInternAtom(display, "WM_STATE", 0);
	AtomWMTakeFocus = XInternAtom(display, "WM_TAKE_FOCUS", 0);

	AtomNetSupported = XInternAtom(display, "_NET_SUPPORTED", 0);
	AtomNetWMName = XInternAtom(display, "_NET_WM_NAME", 0);
	AtomNetWMState = XInternAtom(display, "_NET_WM_STATE", 0);
	AtomNetWMCheck = XInternAtom(display, "_NET_SUPPORTING_WM_CHECK", 0);
	AtomNetWMFullscreen = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", 0);
	AtomNetActiveWindow = XInternAtom(display, "_NET_ACTIVE_WINDOW", 0);
	AtomNetWMWindowType = XInternAtom(display, "_NET_WM_WINDOW_TYPE", 0);
	AtomNetWMWindowTypeDialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG", 0);
	AtomNetClientList = XInternAtom(display, "_NET_CLIENT_LIST", 0);
}

int main(void) {

	printf("\n==========================================================\n");
	printf("            BEGIN            %s\n", __FUNCTION__);
	printf("==========================================================\n");

	kz(0);

	xerrorxlib = XSetErrorHandler(xerrorstart);

	display = XOpenDisplay(NULL);
	screen_def = DefaultScreen(display);

	sw = DisplayWidth(display, screen_def);
	sh = DisplayHeight(display, screen_def);
	root = RootWindow(display, screen_def);
	rootw = XDefaultRootWindow(display);

	black = BlackPixel(display, screen_def);
	white = WhitePixel(display, screen_def);

	printf("point 1\n");


	init_atoms();

//	init_programs();
//	programs = add_prog( NULL );
	programs = cr_prog_list(); //(t_prog *) malloc( sizeof(t_prog) );
	nullprog = programs;

	XGrabServer(display);

	XSetErrorHandler(xerrordummy);
	XSetIOErrorHandler(xerrordummy);

	XUngrabServer(display);

//	Atom delWindow = XInternAtom(display, "WM_DELETE_WINDOW", 0);
//	XSetWMProtocols(display, root, &delWindow, 1);

/*	Atom wmname = XInternAtom(display, "_NET_WM_NAME", 0);
	Atom wmcheck = XInternAtom(display, "_NET_WM_SUPPORTING_WM_CHECK", 0);

	Atom netsupport = XInternAtom(display, "_NET_SUPPORTED", 0);
	Atom clientlist = XInternAtom(display, "_NET_CLIENT_LIST", 0);


	Atom utfstr;

	netwmstate = XInternAtom(display, "_NET_WM_STATE", False);
	netwmfs = XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", False);
	netwmtype = XInternAtom(display, "_NET_WM_WINDOW_TYPE", False);
	netwmdialog = XInternAtom(display, "_NET_WM_WINDOW_TYPE_DIALOG", False);
*/

	printf("point 2\n");


	checkwin = XCreateSimpleWindow(display, root, 0, 0, 1, 1, 0, 0, 0);


 	XChangeProperty(display, checkwin, AtomNetWMCheck, XA_WINDOW, 32, PropModeReplace,
			(unsigned char*) &checkwin, 1);
	XChangeProperty(display, checkwin, AtomNetWMName, AtomUTF8, 8, PropModeReplace,
			(unsigned char*) "asd", 3);

	XChangeProperty(display, root, AtomNetWMCheck, XA_WINDOW, 32, PropModeReplace,
			(unsigned char*) &checkwin, 1);
	XChangeProperty(display, root, AtomNetSupported, XA_WINDOW, 32, PropModeReplace,
			(unsigned char*) &checkwin, 1);
	XDeleteProperty(display, root, AtomNetClientList);

	printf("point 3\n");


	XSync(display, False);
	XFlush(display);

	font = XLoadFont(display, "-*-*-*-R-Normal--*-180-100-100-*-*");
	cursor = XCreateFontCursor(display, XC_left_ptr);
	cursor_move = XCreateFontCursor(display, XC_fleur);
	cursor_size = XCreateFontCursor(display, XC_sizing);

	border_color = _RGB(255, 66, 66);

//	sigset_t sigmask, oldsigmask;
//	sigprocmask(2, &sigmask, &oldsigmask);

	XSetWindowAttributes attrs;
	attrs.event_mask = SubstructureRedirectMask |
						SubstructureRedirectMask |
						SubstructureNotifyMask |
						StructureNotifyMask |
						ExposureMask |
						KeyPressMask |
						KeyReleaseMask |
						PointerMotionMask |
						ButtonPressMask |
						ButtonReleaseMask |
						EnterWindowMask |
						LeaveWindowMask |
						FocusChangeMask |
						PropertyChangeMask;

	attrs.do_not_propagate_mask = 0;

	attrs.cursor = cursor;


	printf("point 4\n");


	unsigned long attrs_mask = CWEventMask | NoEventMask | CWBackPixel;

	XSelectInput(display, root, attrs.event_mask);
	XSync(display, False);

	XChangeWindowAttributes(display, root, CWEventMask | CWCursor, &attrs);

	XGrabKey(display, XKeysymToKeycode(display, XK_1),
			XKeysymToKeycode(display, XK_Alt_L), root, False,
			GrabModeAsync, GrabModeAsync);
	XGrabKey(display, XKeysymToKeycode(display, XK_2),
			XKeysymToKeycode(display, XK_Alt_L), root, False,
			GrabModeAsync, GrabModeAsync);
	XGrabKey(display, XKeysymToKeycode(display, XK_3),
			XKeysymToKeycode(display, XK_Alt_L), root, False,
			GrabModeAsync, GrabModeAsync);

	printf("point 5\n");



	XSync(display, False);
	XFlush(display);

	printf("point 5.1\n");


	XSync(display, False);

	Atom wm_delete_window = XInternAtom(display, "WM_DELETE_WINDOW", 0);

	printf("point 5.2\n");


//	printf("DEBUG X11 func: %s | display: %d | screen_def: %d | root: %d | rootw: %d | checkwin: %d \n", __FUNCTION__, display, screen_def, root, rootw, checkwin);





//	change_monitor(1);

	printf("point 6\n");


	XEvent e;
	XSync(display, False);
	while (1) {

		XNextEvent(display, &e);

		switch (e.type) {
		case ClientMessage:
			printf("point 6\n");

			if ((Atom) e.xclient.data.l[0] == wm_delete_window) {
				//mkill(&e.xclient);
			}
			handle_client_message(&e.xclient);

		case Expose:
			printf("point 7\n");
			handle_expose(&e.xexpose);
			break;
		case KeyPress:
			printf("point 8\n");
			handle_key_press(&e.xkey);
			break;
		case KeyRelease:
			printf("point 8.1\n");
			handle_key_release(&e.xkey);
			break;
		case ConfigureRequest:
			printf("point 9\n");
			handle_configure_request(&e.xconfigurerequest);
			break;
		case ConfigureNotify:
			printf("point 10\n");
			handle_configure_notify(&e.xconfigure);
			break;
		case MapRequest:
			printf("point 11\n");
			handle_map_request(&e.xmaprequest);
			break;
		case ButtonPress:
			handle_button_press(&e.xbutton);
			break;
		case ButtonRelease:
			handle_button_release(&e.xbutton);
			break;
		case MotionNotify:
			handle_motion_notify(&e.xmotion);
			break;
		case UnmapNotify:
//			handle_unmap_notify(&e.xunmap);
			break;

		case DestroyNotify:
			printf("point 12\n");
			handle_destroy_notify(&e.xdestroywindow);
			break;

		case PropertyNotify:
			printf("point 13\n");
			handle_property_notify(&e.xproperty);
			break;
//		case UnmapNotify:
//			handle_unmap_notify(&e.xunmap);
//			break;					
		}

	}
	return EXIT_SUCCESS;
}
